import re

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardRemove

from filters.is_date import IsDate
from filters.is_digit import IsDigit
from filters.is_phone import IsPhone
from filters.verifi_phone_to_db import VerificationPhoneToDB
from filters.verifi_sector_to_db import VerificationSectorToDB
from filters.verifi_telegram_id_to_db import VerificationTelegramIdToDB
from keyboards.default.send_by_apartment import kb_yes_or_no
from keyboards.default.system import kb_users_rang, kb_users_type_of_property
from loader import dp
from sql.sql_query import SqlQuery
from states import SystemState


@dp.message_handler(Text(equals='–ê–≥–µ–Ω—Ç'), state=SystemState.UserAdd)
async def get_first_name(message: types.Message):
    await message.answer('üî¥üî¥üî¥ –í–Ω–∏–º–∞–Ω–∏–µ.\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω—è—é—Ç—å—Å—è –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ')
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –∏–º—è', reply_markup=ReplyKeyboardRemove())
    await SystemState.UserAddAgent_Q1.set()


@dp.message_handler(state=SystemState.UserAddAgent_Q1)
async def get_last_name(message: types.Message, state=FSMContext):
    first_name = message.text.strip().lower()
    await state.update_data(var_first_name=first_name)

    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é', reply_markup=ReplyKeyboardRemove())
    await SystemState.UserAddAgent_Q2.set()


@dp.message_handler(state=SystemState.UserAddAgent_Q2)
async def get_patronymic(message: types.Message, state=FSMContext):
    last_name = message.text.strip().lower()
    await state.update_data(var_last_name=last_name)

    await message.answer('–£–∫–∞–∂–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ', reply_markup=ReplyKeyboardRemove())
    await SystemState.UserAddAgent_Q3.set()


@dp.message_handler(state=SystemState.UserAddAgent_Q3)
async def get_date(message: types.Message, state=FSMContext):
    patronymic = message.text.strip().lower()
    await state.update_data(var_patronymic=patronymic)

    await message.answer('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–ì–ì–ì–ì-–ú–ú-–î–î)', reply_markup=ReplyKeyboardRemove())
    await SystemState.UserAddAgent_Q4.set()


@dp.message_handler(IsDate(), state=SystemState.UserAddAgent_Q4)
async def get_residence_area(message: types.Message, state=FSMContext):
    date = message.text.strip()
    await state.update_data(var_date=date)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–≥.–¢–∞—à–∫–µ–Ω—Ç, –°–µ—Ä–≥–µ–ª–∏–π—Å–∫–∏–π —Ä–∞–π–æ–Ω, –°–µ—Ä–≥–µ–ª–∏ 7)',
                         reply_markup=ReplyKeyboardRemove())
    await SystemState.UserAddAgent_Q5.set()


@dp.message_handler(state=SystemState.UserAddAgent_Q5)
async def get_phone_number(message: types.Message, state=FSMContext):
    residence_area = message.text.strip().lower()
    await state.update_data(var_residence_area=residence_area)

    await message.answer('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–ª–∞ –µ–º—É –∫–æ–º–ø–∞–Ω–∏—è)', reply_markup=ReplyKeyboardRemove())
    await SystemState.UserAddAgent_Q6.set()


@dp.message_handler(IsPhone(), VerificationPhoneToDB(), state=SystemState.UserAddAgent_Q6)
async def get_telegram_id(message: types.Message, state=FSMContext):
    phone_number = message.text.strip()
    # –ü–æ–ª—É—á–∞–µ–º —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞
    decor_number = re.findall(r'\d+', phone_number)
    # –ü–æ–ª—É—á–∞–µ–º 9 —á–∏—Å–µ–ª —Å –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
    decor_number = int(''.join(decor_number)[-9:])
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã 998
    decor_number = '998' + str(decor_number)

    await state.update_data(var_phone_number=decor_number)

    await message.answer('–£–∫–∞–∂–∏—Ç–µ id —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', reply_markup=ReplyKeyboardRemove())
    await SystemState.UserAddAgent_Q7.set()


@dp.message_handler(IsDigit(), VerificationTelegramIdToDB(), state=SystemState.UserAddAgent_Q7)
async def get_type_of_property(message: types.Message, state=FSMContext):
    telegram_id = message.text.strip()

    await state.update_data(var_telegram_id=telegram_id)

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', reply_markup=kb_users_type_of_property)
    await SystemState.UserAddAgent_Q8.set()


@dp.message_handler(state=SystemState.UserAddAgent_Q8)
async def get_rang(message: types.Message, state=FSMContext):
    type_of_property = message.text.strip().lower()

    await state.update_data(var_type_of_property=type_of_property)

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–Ω–≥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', reply_markup=kb_users_rang)
    await SystemState.UserAddAgent_Q9.set()


@dp.message_handler(state=SystemState.UserAddAgent_Q9)
async def get_sector(message: types.Message, state=FSMContext):
    rang = message.text.strip().lower()

    await state.update_data(var_rang=rang)

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–æ–∫ –∑–∞ –∫–∞—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫\n(–ù–∞–ø—Ä–∏–º–µ—Ä: 1, 2, 3)\n'
                         '–£—á–∞—Å—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω!', reply_markup=ReplyKeyboardRemove())
    print(state.get_data())
    await SystemState.UserAddAgent_Q10.set()


@dp.message_handler(IsDigit(), VerificationSectorToDB(), state=SystemState.UserAddAgent_Q10)
async def verification(message: types.Message, state=FSMContext):
    sector = message.text.strip()
    await state.update_data(var_sector=sector)

    values = await state.get_data()

    await message.answer('üî¥üî¥üî¥ –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û –ü–†–û–í–ï–†–¨–¢–ï')
    await message.answer(f'–ò–º—è:  <code>{values["var_first_name"].title()}</code>\n'
                         f'–§–∞–º–∏–ª–∏—è:  <code>{values["var_last_name"].title()}</code>\n'
                         f'–û—Ç—á–µ—Å—Ç–≤–æ:  <code>{values["var_patronymic"].title()}</code>\n'
                         f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:  <code>{values["var_date"]}</code>\n'
                         f'–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:  <code>{values["var_residence_area"]}</code>\n'
                         f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:  <code>{values["var_phone_number"]}</code>\n'
                         f'–¢–µ–ª–µ–≥—Ä–∞–º ID:  <code>{values["var_telegram_id"]}</code>\n'
                         f'–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å:  <code>{values["var_type_of_property"].title()}</code>\n'
                         f'–†–∞–Ω–≥:  <code>{values["var_rang"].title()}</code>\n'
                         f'–£—á–∞—Å—Ç–æ–∫:  <code>{values["var_sector"]}</code>\n')

    await message.answer('–í—ã –≤—Å–µ –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?', reply_markup=kb_yes_or_no)
    await SystemState.UserAddAgent_Q11.set()


@dp.message_handler(state=SystemState.UserAddAgent_Q11)
async def send_agent_db(message: types.Message, state=FSMContext):
    if message.text.lower() == '–¥–∞':
        values = await state.get_data()
        SqlQuery().add_row(table_name='agents',
                           keys=[
                               'telegram_id',
                               'first_name',
                               'last_name',
                               'patronymic',
                               'date',
                               'phone',
                               'residence_area',
                               'type_of_property',
                               'class',
                               'sector'
                           ],
                           values=(
                               f'{values["var_telegram_id"]}',
                               f'{values["var_first_name"]}',
                               f'{values["var_last_name"]}',
                               f'{values["var_patronymic"]}',
                               f'{values["var_date"]}',
                               f'{values["var_phone_number"]}',
                               f'{values["var_residence_area"]}',
                               f'{values["var_type_of_property"]}',
                               f'{values["var_rang"]}',
                               f'{values["var_sector"]}',
                           ))
        SqlQuery().add_row(table_name='bot_timer',
                           keys=[
                               'telegram_id',
                               'count_day',
                               'count_hours',
                               'day',
                               'hour'
                           ],
                           values=(
                               f'{values["var_telegram_id"]}',
                               0,
                               0,
                               0,
                               0
                           ))
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
        await message.answer('–ú—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—Å –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ...')
        await SystemState.Start.set()

    elif message.text.lower() == '–Ω–µ—Ç':
        await state.reset_data()
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=ReplyKeyboardRemove())
        await message.answer(
            '–ú—ã –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª–∏ –≤–∞—Å –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ <b>–ø–∞—Ä–æ–ª—å</b> —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ...')
        await SystemState.Start.set()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
