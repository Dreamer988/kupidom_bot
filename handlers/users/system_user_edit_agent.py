import re

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardRemove

from filters.is_date import IsDate
from filters.is_digit import IsDigit
from filters.is_phone import IsPhone
from filters.verifi_phone_to_db import VerificationPhoneToDB
from filters.verifi_telegram_id_to_db import VerificationTelegramIdToDB
from keyboards.default.send_by_apartment import kb_yes_or_no
from keyboards.default.system import kb_users_edit_agent_menu, kb_users_edit_exit, kb_users_type_of_property, \
    kb_users_rang
from loader import dp
from sql.sql_query import SqlQuery
from states import SystemState


@dp.message_handler(Text(equals='–ê–≥–µ–Ω—Ç'), state=SystemState.UserEdit)
async def start_edit_agent(message: types.Message):
    await message.answer('üî¥üî¥üî¥ –í–Ω–∏–º–∞–Ω–∏–µ.\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω—è—é—Ç—å—Å—è –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n—É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.',
                         reply_markup=ReplyKeyboardRemove())
    await SystemState.UserEditAgent.set()


@dp.message_handler(IsPhone(), state=SystemState.UserEditAgent)
async def search_by_number(message: types.Message, state=FSMContext):
    phone_number = message.text.strip()
    # –ü–æ–ª—É—á–∞–µ–º —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞
    decor_number = re.findall(r'\d+', phone_number)
    # –ü–æ–ª—É—á–∞–µ–º 9 —á–∏—Å–µ–ª —Å –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
    decor_number = int(''.join(decor_number)[-9:])
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã 998
    decor_number = '998' + str(decor_number)

    search_phone_to_db = SqlQuery().get_row(table_name='agents',
                                            search_param=[
                                                f"phone = '{decor_number}'"
                                            ])

    if search_phone_to_db:
        search_phone_to_db = search_phone_to_db[0]
        await state.update_data(db_value=search_phone_to_db)
        await message.answer(f'–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —ç—Ç–æ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞:  <b>{decor_number}</b>')

        await message.answer(f'–ò–º—è:  <code>{search_phone_to_db[2].title()}</code>\n'
                             f'–§–∞–º–∏–ª–∏—è:  <code>{search_phone_to_db[3].title()}</code>\n'
                             f'–û—Ç—á–µ—Å—Ç–≤–æ:  <code>{search_phone_to_db[4].title()}</code>\n'
                             f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:  <code>{search_phone_to_db[5]}</code>\n'
                             f'–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:  <code>{search_phone_to_db[7]}</code>\n'
                             f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:  <code>{search_phone_to_db[6]}</code>\n'
                             f'–¢–µ–ª–µ–≥—Ä–∞–º ID:  <code>{search_phone_to_db[1]}</code>\n'
                             f'–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å:  <code>{search_phone_to_db[8].title()}</code>\n'
                             f'–†–∞–Ω–≥:  <code>{search_phone_to_db[9].title()}</code>\n'
                             f'–£—á–∞—Å—Ç–æ–∫:  <code>{search_phone_to_db[10]}</code>\n')

        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –∏–∑–º–µ–Ω–∏—Ç—å\n'
                             '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /system —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                             reply_markup=kb_users_edit_agent_menu)

        await SystemState.UserEditAgent_EditParam.set()
    else:
        await message.answer(f'–î–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞: <b>{decor_number}</b> –Ω–µ—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
        await message.answer(f'<b>–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n'
                             f'–ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /system')


# Edit First Name
@dp.message_handler(Text(equals='–ò–º—è'), state=SystemState.UserEditAgent_EditParam)
async def edit_first_name(message: types.Message, state=FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è')
    await SystemState.UserEditAgent_FirstName_Q1.set()


@dp.message_handler(state=SystemState.UserEditAgent_FirstName_Q1)
async def edit_first_name(message: types.Message, state=FSMContext):
    first_name = message.text.strip().lower()
    await state.update_data(edit_first_name=first_name)
    value = await state.get_data()
    db_values = value['db_value']
    await message.answer(f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è —Å <b>{db_values[2].title()}</b> –Ω–∞ <b>{first_name.title()}</b>?',
                         reply_markup=kb_yes_or_no)
    await SystemState.UserEditAgent_FirstName_Q2.set()


@dp.message_handler(state=SystemState.UserEditAgent_FirstName_Q2)
async def edit_first_name(message: types.Message, state=FSMContext):
    values = await state.get_data()
    db_values = values['db_value']
    first_name = values['edit_first_name']
    if message.text.strip().lower() == '–¥–∞':
        SqlQuery().edit_row(table_name='agents',
                            search_column_name='phone',
                            search_value=db_values[6],
                            edit_param=[
                                f"`first_name` = '{first_name}'"
                            ])
        await message.answer('–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    elif message.text.strip().lower() == '–Ω–µ—Ç':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


# Edit Last Name
@dp.message_handler(Text(equals='–§–∞–º–∏–ª–∏—è'), state=SystemState.UserEditAgent_EditParam)
async def edit_last_name(message: types.Message, state=FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é')
    await SystemState.UserEditAgent_LastName_Q1.set()


@dp.message_handler(state=SystemState.UserEditAgent_LastName_Q1)
async def edit_last_name(message: types.Message, state=FSMContext):
    first_name = message.text.strip().lower()
    await state.update_data(edit_last_name=first_name)
    value = await state.get_data()
    db_values = value['db_value']
    await message.answer(f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–º–∏–ª–∏—é —Å <b>{db_values[3].title()}</b> –Ω–∞ <b>{first_name.title()}</b>?',
                         reply_markup=kb_yes_or_no)
    await SystemState.UserEditAgent_LastName_Q2.set()


@dp.message_handler(state=SystemState.UserEditAgent_LastName_Q2)
async def edit_last_name(message: types.Message, state=FSMContext):
    values = await state.get_data()
    db_values = values['db_value']
    last_name = values['edit_last_name']
    if message.text.strip().lower() == '–¥–∞':
        SqlQuery().edit_row(table_name='agents',
                            search_column_name='phone',
                            search_value=db_values[6],
                            edit_param=[
                                f"`last_name` = '{last_name}'"
                            ])
        await message.answer('–§–∞–º–∏–ª–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    elif message.text.strip().lower() == '–Ω–µ—Ç':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


# Edit Patronymic
@dp.message_handler(Text(equals='–û—Ç—á–µ—Å—Ç–≤–æ'), state=SystemState.UserEditAgent_EditParam)
async def edit_patronymic(message: types.Message, state=FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ')
    await SystemState.UserEditAgent_Patronymic_Q1.set()


@dp.message_handler(state=SystemState.UserEditAgent_Patronymic_Q1)
async def edit_patronymic(message: types.Message, state=FSMContext):
    patronymic = message.text.strip().lower()
    await state.update_data(edit_patronymic=patronymic)
    value = await state.get_data()
    db_values = value['db_value']
    await message.answer(f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ —Å <b>{db_values[4].title()}</b> –Ω–∞ <b>{patronymic.title()}</b>?',
                         reply_markup=kb_yes_or_no)
    await SystemState.UserEditAgent_Patronymic_Q2.set()


@dp.message_handler(state=SystemState.UserEditAgent_Patronymic_Q2)
async def edit_patronymic(message: types.Message, state=FSMContext):
    values = await state.get_data()
    db_values = values['db_value']
    patronymic = values['edit_patronymic']
    if message.text.strip().lower() == '–¥–∞':
        SqlQuery().edit_row(table_name='agents',
                            search_column_name='phone',
                            search_value=db_values[6],
                            edit_param=[
                                f"`patronymic` = '{patronymic}'"
                            ])
        await message.answer('–û—Ç—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    elif message.text.strip().lower() == '–Ω–µ—Ç':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


# Edit Date
@dp.message_handler(Text(equals='–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è'), state=SystemState.UserEditAgent_EditParam)
async def edit_date(message: types.Message, state=FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–ì–ì–ì–ì-–ú–ú-–î–î)')
    await SystemState.UserEditAgent_Date_Q1.set()


@dp.message_handler(IsDate(), state=SystemState.UserEditAgent_Date_Q1)
async def edit_date(message: types.Message, state=FSMContext):
    date = message.text.strip().lower()
    await state.update_data(edit_date=date)
    value = await state.get_data()
    db_values = value['db_value']
    await message.answer(f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Å <b>{db_values[5]}</b> –Ω–∞ <b>{date}</b>?',
                         reply_markup=kb_yes_or_no)
    await SystemState.UserEditAgent_Date_Q2.set()


@dp.message_handler(state=SystemState.UserEditAgent_Date_Q2)
async def edit_date(message: types.Message, state=FSMContext):
    values = await state.get_data()
    db_values = values['db_value']
    date = values['edit_date']
    if message.text.strip().lower() == '–¥–∞':
        SqlQuery().edit_row(table_name='agents',
                            search_column_name='phone',
                            search_value=db_values[6],
                            edit_param=[
                                f"`date` = '{date}'"
                            ])
        await message.answer('–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    elif message.text.strip().lower() == '–Ω–µ—Ç':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


# Edit Residence Area
@dp.message_handler(Text(equals='–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è'), state=SystemState.UserEditAgent_EditParam)
async def edit_residence_area(message: types.Message, state=FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–≥.–¢–∞—à–∫–µ–Ω—Ç, –°–µ—Ä–≥–µ–ª–∏–π—Å–∫–∏–π —Ä–∞–π–æ–Ω, –°–µ—Ä–≥–µ–ª–∏ 7)')
    await SystemState.UserEditAgent_ResidenceArea_Q1.set()


@dp.message_handler(state=SystemState.UserEditAgent_ResidenceArea_Q1)
async def edit_residence_area(message: types.Message, state=FSMContext):
    residence_area = message.text.strip().lower()
    await state.update_data(edit_residence_area=residence_area)
    value = await state.get_data()
    db_values = value['db_value']
    await message.answer(f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è —Å <b>{db_values[7]}</b> –Ω–∞ <b>{residence_area}</b>?',
                         reply_markup=kb_yes_or_no)
    await SystemState.UserEditAgent_ResidenceArea_Q2.set()


@dp.message_handler(state=SystemState.UserEditAgent_ResidenceArea_Q2)
async def edit_residence_area(message: types.Message, state=FSMContext):
    values = await state.get_data()
    db_values = values['db_value']
    residence_area = values['edit_residence_area']
    if message.text.strip().lower() == '–¥–∞':
        SqlQuery().edit_row(table_name='agents',
                            search_column_name='phone',
                            search_value=db_values[6],
                            edit_param=[
                                f"`residence_area` = '{residence_area}'"
                            ])
        await message.answer('–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    elif message.text.strip().lower() == '–Ω–µ—Ç':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


# Edit Phone
@dp.message_handler(Text(equals='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'), state=SystemState.UserEditAgent_EditParam)
async def edit_phone(message: types.Message, state=FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    await SystemState.UserEditAgent_Phone_Q1.set()


@dp.message_handler(VerificationPhoneToDB(), state=SystemState.UserEditAgent_Phone_Q1)
async def edit_phone(message: types.Message, state=FSMContext):
    phone_number = message.text.strip()
    # –ü–æ–ª—É—á–∞–µ–º —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞
    decor_number = re.findall(r'\d+', phone_number)
    # –ü–æ–ª—É—á–∞–µ–º 9 —á–∏—Å–µ–ª —Å –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
    decor_number = int(''.join(decor_number)[-9:])
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã 998
    decor_number = '998' + str(decor_number)

    await state.update_data(edit_phone=decor_number)
    value = await state.get_data()
    db_values = value['db_value']
    await message.answer(f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å <b>{db_values[6]}</b> –Ω–∞ <b>{decor_number}</b>?',
                         reply_markup=kb_yes_or_no)
    await SystemState.UserEditAgent_Phone_Q2.set()


@dp.message_handler(state=SystemState.UserEditAgent_Phone_Q2)
async def edit_phone(message: types.Message, state=FSMContext):
    values = await state.get_data()
    db_values = values['db_value']
    decor_number = values['edit_phone']
    if message.text.strip().lower() == '–¥–∞':
        SqlQuery().edit_row(table_name='agents',
                            search_column_name='phone',
                            search_value=db_values[6],
                            edit_param=[
                                f"`phone` = '{decor_number}'"
                            ])
        await message.answer('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    elif message.text.strip().lower() == '–Ω–µ—Ç':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


# Edit Telegram ID
@dp.message_handler(Text(equals='–¢–µ–ª–µ–≥—Ä–∞–º ID'), state=SystemState.UserEditAgent_EditParam)
async def edit_telegram_id(message: types.Message, state=FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º ID')
    await SystemState.UserEditAgent_TelegramID_Q1.set()


@dp.message_handler(VerificationTelegramIdToDB(), state=SystemState.UserEditAgent_TelegramID_Q1)
async def edit_telegram_id(message: types.Message, state=FSMContext):
    telegram_id = message.text.strip()

    await state.update_data(edit_telegram_id=telegram_id)
    value = await state.get_data()
    db_values = value['db_value']
    await message.answer(f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º ID —Å <b>{db_values[1]}</b> –Ω–∞ <b>{telegram_id}</b>?',
                         reply_markup=kb_yes_or_no)
    await SystemState.UserEditAgent_TelegramID_Q2.set()


@dp.message_handler(state=SystemState.UserEditAgent_TelegramID_Q2)
async def edit_telegram_id(message: types.Message, state=FSMContext):
    values = await state.get_data()
    db_values = values['db_value']
    telegram_id = values['edit_telegram_id']
    if message.text.strip().lower() == '–¥–∞':
        SqlQuery().edit_row(table_name='agents',
                            search_column_name='phone',
                            search_value=db_values[6],
                            edit_param=[
                                f"`telegram_id` = '{telegram_id}'"
                            ])
        await message.answer('–¢–µ–ª–µ–≥—Ä–∞–º ID –∏–∑–º–µ–Ω–µ–Ω')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    elif message.text.strip().lower() == '–Ω–µ—Ç':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


# Edit Type Of Property
@dp.message_handler(Text(equals='–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å'), state=SystemState.UserEditAgent_EditParam)
async def edit_type_of_property(message: types.Message, state=FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏', reply_markup=kb_users_type_of_property)
    await SystemState.UserEditAgent_TypeOfProperty_Q1.set()


@dp.message_handler(state=SystemState.UserEditAgent_TypeOfProperty_Q1)
async def edit_type_of_property(message: types.Message, state=FSMContext):
    type_of_property = message.text.strip().lower()

    value = await state.get_data()
    db_values = value['db_value']
    search_sector_to_db = SqlQuery().get_row(table_name='agents',
                                             search_param=[
                                                 f"type_of_property = '{type_of_property}'",
                                                 f"sector = '{db_values[10]}'",
                                             ])
    if search_sector_to_db:
        await message.answer(f'–£—á–∞—Å—Ç–æ–∫ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <b>{db_values[10]}</b>'
                             f' –∏ –≤–∏–¥–æ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ <b>{type_of_property.title()}</b>'
                             f' —É–∂–µ –ø—Ä–∏—Å–≤–æ–µ–Ω –¥—Ä—É–≥–æ–º—É –∞–≥–µ–Ω—Ç—É.\n'
                             f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∏–¥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</b>\n'
                             f'–ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /system')
    else:
        await state.update_data(edit_type_of_property=type_of_property)
        await message.answer(
            f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤–∏–¥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å <b>{db_values[8]}</b> –Ω–∞ <b>{type_of_property}</b>?',
            reply_markup=kb_yes_or_no)
        await SystemState.UserEditAgent_TypeOfProperty_Q2.set()


@dp.message_handler(state=SystemState.UserEditAgent_TypeOfProperty_Q2)
async def edit_type_of_property(message: types.Message, state=FSMContext):
    values = await state.get_data()
    db_values = values['db_value']
    type_of_property = values['edit_type_of_property']
    if message.text.strip().lower() == '–¥–∞':
        SqlQuery().edit_row(table_name='agents',
                            search_column_name='phone',
                            search_value=db_values[6],
                            edit_param=[
                                f"`type_of_property` = '{type_of_property}'"
                            ])
        await message.answer('–í–∏–¥ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    elif message.text.strip().lower() == '–Ω–µ—Ç':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


# Edit Rang
@dp.message_handler(Text(equals='–†–∞–Ω–≥'), state=SystemState.UserEditAgent_EditParam)
async def edit_telegram_id(message: types.Message, state=FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–Ω–≥', reply_markup=kb_users_rang)
    await SystemState.UserEditAgent_Rang_Q1.set()


@dp.message_handler(state=SystemState.UserEditAgent_Rang_Q1)
async def edit_telegram_id(message: types.Message, state=FSMContext):
    rang = message.text.strip().lower()

    await state.update_data(edit_rang=rang)
    value = await state.get_data()
    db_values = value['db_value']
    await message.answer(f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–≥ —Å <b>{db_values[9]}</b> –Ω–∞ <b>{rang}</b>?',
                         reply_markup=kb_yes_or_no)
    await SystemState.UserEditAgent_Rang_Q2.set()


@dp.message_handler(state=SystemState.UserEditAgent_Rang_Q2)
async def edit_telegram_id(message: types.Message, state=FSMContext):
    values = await state.get_data()
    db_values = values['db_value']
    rang = values['edit_rang']
    if message.text.strip().lower() == '–¥–∞':
        SqlQuery().edit_row(table_name='agents',
                            search_column_name='phone',
                            search_value=db_values[6],
                            edit_param=[
                                f"`class` = '{rang}'"
                            ])
        await message.answer('–†–∞–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    elif message.text.strip().lower() == '–Ω–µ—Ç':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


# Edit Sector
@dp.message_handler(Text(equals='–£—á–∞—Å—Ç–æ–∫'), state=SystemState.UserEditAgent_EditParam)
async def edit_type_of_property(message: types.Message, state=FSMContext):
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —É—á–∞—Å—Ç–æ–∫')
    await SystemState.UserEditAgent_Sector_Q1.set()


@dp.message_handler(IsDigit(), state=SystemState.UserEditAgent_Sector_Q1)
async def edit_type_of_property(message: types.Message, state=FSMContext):
    sector = message.text.strip().lower()

    value = await state.get_data()
    db_values = value['db_value']
    search_sector_to_db = SqlQuery().get_row(table_name='agents',
                                             search_param=[
                                                 f"type_of_property = '{db_values[8]}'",
                                                 f"sector = '{sector}'",
                                             ])
    if search_sector_to_db:
        await message.answer(f'–£—á–∞—Å—Ç–æ–∫ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º <b>{sector}</b>'
                             f' –∏ –≤–∏–¥–æ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ <b>{db_values[8].title()}</b>'
                             f' —É–∂–µ –ø—Ä–∏—Å–≤–æ–µ–Ω –¥—Ä—É–≥–æ–º—É –∞–≥–µ–Ω—Ç—É.\n'
                             f'<b>–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–∫–∞</b>\n'
                             f'–ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–∞–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /system')
    else:
        await state.update_data(edit_sector=sector)
        await message.answer(
            f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —É—á–∞—Å—Ç–æ–∫ —Å <b>{db_values[10]}</b> –Ω–∞ <b>{sector}</b>?',
            reply_markup=kb_yes_or_no)
        await SystemState.UserEditAgent_Sector_Q2.set()


@dp.message_handler(state=SystemState.UserEditAgent_Sector_Q2)
async def edit_type_of_property(message: types.Message, state=FSMContext):
    values = await state.get_data()
    db_values = values['db_value']
    sector = values['edit_sector']
    if message.text.strip().lower() == '–¥–∞':
        SqlQuery().edit_row(table_name='agents',
                            search_column_name='phone',
                            search_value=db_values[6],
                            edit_param=[
                                f"`sector` = '{sector}'"
                            ])
        await message.answer('–£—á–∞—Å—Ç–æ–∫ –∏–∑–º–µ–Ω–µ–Ω')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    elif message.text.strip().lower() == '–Ω–µ—Ç':
        await message.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ')
        await message.answer('–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë</b>\n'
                             '–õ–∏–±–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ <b>–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é</b>', reply_markup=kb_users_edit_exit)
        await SystemState.UserEditExit.set()
    else:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')


# Edit Exit
@dp.message_handler(Text(equals='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), state=SystemState.UserEditExit)
async def exit_edit_agent(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ <b>–ø–∞—Ä–æ–ª—å</b> —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ...')
    await SystemState.Start.set()


@dp.message_handler(Text(equals='–ò–∑–º–µ–Ω–∏—Ç—å –µ—â—ë'), state=SystemState.UserEditExit)
async def exit_edit_agent(message: types.Message):
    await message.answer('üî¥üî¥üî¥ –í–Ω–∏–º–∞–Ω–∏–µ.\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω—è—é—Ç—å—Å—è –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n—É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.',
                         reply_markup=ReplyKeyboardRemove())
    await SystemState.UserEditAgent.set()
